import numpy as np
import tensorflow as tf
import pandas as pd
import matplotlib.pyplot as plt
import os

dataset_path = os.listdir('dataset')

print(dataset_path) Â # what kinds of classes are in this dataset

print("Types of classes labels found: ", len(dataset_path))
class_labels = []

for item in dataset_path:
    # Get all the file names
    all_classes = os.listdir('dataset' + '/' + item)
    
    # Add them to the list
    for room in all_classes:
        class_labels.append((item, 'dataset' + '/' + item + '/' + room))

# Print the first 5 elements of the class_labels list
print(class_labels[:5])
# Build a dataframe       
df = pd.DataFrame(data=class_labels, columns=['Labels', 'image'])
print(df.head())
print(df.tail())
# Let's check how many samples for each category are present
print("Total number of images in the dataset: ", len(df))

# Count the number of samples for each category (label)
label_count = df['Labels'].value_counts()
print(label_count)
import cv2
import os

path = 'dataset/'
dataset_path = os.listdir('dataset')

im_size = 224

images = []
labels = []

for i in dataset_path:
    data_path = path + str(i)
    filenames = [j for j in os.listdir(data_path)]
    
    for f in filenames:
        img = cv2.imread(data_path + '/' + f)
        img = cv2.resize(img, (im_size, im_size))
        images.append(img)
        labels.append(i)
from sklearn.preprocessing import LabelEncoder, OneHotEncoder

# Extract labels from the 'Labels' column
y = df['Labels'].values
print("Original labels:\n", y)

# Use LabelEncoder to convert categorical labels to numerical format
y_labelencoder = LabelEncoder()
y_encoded = y_labelencoder.fit_transform(y)
print("Encoded labels:\n", y_encoded)
# Reshape y to have a single column
y = y.reshape(-1, 1)

# Use ColumnTransformer with OneHotEncoder to perform one-hot encoding
from sklearn.compose import ColumnTransformer

ct = ColumnTransformer([('my_ohe', OneHotEncoder(), [0])], remainder='passthrough')
Y = ct.fit_transform(y)

# Print the one-hot encoded labels
print("One-hot encoded labels (first 5):\n", Y[:5])
print("One-hot encoded labels (from index 35 onwards):\n", Y[35:])
from sklearn.utils import shuffle
from sklearn.model_selection import train_test_split

# Shuffle images and labels in the same random order
images, Y = shuffle(images, Y, random_state=1)

# Split the data into training and testing sets
train_x, test_x, train_y, test_y = train_test_split(images, Y, test_size=0.05, random_state=415)

# Inspect the shape of the training and testing sets
print("Training data shape:")
print("train_x:", train_x.shape)
print("train_y:", train_y.shape)

print("\nTesting data shape:")
print("test_x:", test_x.shape)
print("test_y:", test_y.shape)
from tensorflow.keras import layers
from tensorflow.keras.applications import EfficientNetB0

NUM_CLASSES = 3
IMG_SIZE = 224
size = (IMG_SIZE, IMG_SIZE)

inputs = layers.Input(shape=(IMG_SIZE, IMG_SIZE, 3))

# Using model without transfer learning
outputs = EfficientNetB0(include_top=True, weights=None, classes=NUM_CLASSES)(inputs)
import matplotlib.pyplot as plt

def plot_hist(hist):
    plt.plot(hist.history["accuracy"])
    # Uncomment the line below if you have validation data
    # plt.plot(hist.history["val_accuracy"])
    plt.title("model accuracy")
    plt.ylabel("accuracy")
    plt.xlabel("epoch")
    plt.legend(["train", "validation"], loc="upper left")
    plt.show()

plot_hist(hist)
preds = model.evaluate(test_x, test_y)
print("Loss =", preds[0])
print("Test Accuracy =", preds[1])
from matplotlib.pyplot import imread, imshow
from tensorflow.keras.applications.imagenet_utils import preprocess_input
import cv2
import numpy as np

img_path = 'testimage.jpg'

# Load and preprocess the image using cv2
img = cv2.imread(img_path)
img = cv2.resize(img, (224, 224))
x = np.expand_dims(img, axis=0)
x = preprocess_input(x)

print('Input image shape:', x.shape)

# Display the image
my_image = imread(img_path)
imshow(my_image)
preds = model.predict(x)

# Display the predicted probabilities for each class
print("Probabilities for each class:", preds)

# Get the predicted class index
predicted_class_index = np.argmax(preds)

# Map the class index to the corresponding class label
class_labels = {0: 'earphones', 1: 'headphones', 2: 'phones'}  # Replace with your actual class labels

predicted_class_label = class_labels[predicted_class_index]

# Display the predicted class label
print("Predicted class:", predicted_class_label)
# Check if GPU is enabled and list available physical devices
tf.config.list_physical_devices()
%%timeit -n1 -r1
with tf.device('/CPU:0'):
    cpu_performance = model.fit(train_x, train_y, epochs=30, verbose=2)
%%timeit -n1 -r1
with tf.device('/GPU:0'):
    gpu_performance = model.fit(train_x, train_y, epochs=30, verbose=2)